// src/index.ts
import through from "through2";
import PluginError from "plugin-error";
import jsBeautify from "js-beautify";
import { createLogger } from "@ntnyq/logger";
var PLUGIN_NAME = "gulp-format-html";
var DEFAULT_OPTIONS = {
  indent_size: 2,
  inline: [],
  content_unformatted: ["pre", "textarea", "script"]
};
var logger = createLogger({ time: "HH:mm:ss" });
var beautifyHtml = jsBeautify.html;
var formatHTML = (options = {}) => {
  options = Object.assign({}, DEFAULT_OPTIONS, options);
  return through.obj((file, enc, next) => {
    if (file.isNull())
      return next(null, file);
    const beautify = (buf, _, cb) => {
      try {
        const contents = Buffer.from(beautifyHtml((buf == null ? void 0 : buf.toString()) ?? "", options));
        if (next === cb) {
          file.contents = contents;
          return cb(null, file);
        }
        cb(null, contents);
        next(null, file);
      } catch (err) {
        const opts = Object.assign({}, options, { fileName: file.path });
        const error = new PluginError(PLUGIN_NAME, err, opts);
        if (next !== cb) {
          return next(error);
        }
        cb(error);
      }
    };
    if (file.isStream()) {
      file.contents = file.contents.pipe(through(beautify));
    } else {
      if (options.verbose) {
        logger.info(`${PLUGIN_NAME} is formatting file: ${file.path}`);
      }
      beautify(file.contents, null, next);
    }
  });
};
var src_default = formatHTML;
export {
  src_default as default,
  formatHTML
};
