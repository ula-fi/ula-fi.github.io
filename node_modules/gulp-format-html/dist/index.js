"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }// src/index.ts
var _through2 = require('through2'); var _through22 = _interopRequireDefault(_through2);
var _pluginerror = require('plugin-error'); var _pluginerror2 = _interopRequireDefault(_pluginerror);
var _jsbeautify = require('js-beautify'); var _jsbeautify2 = _interopRequireDefault(_jsbeautify);
var _logger = require('@ntnyq/logger');
var PLUGIN_NAME = "gulp-format-html";
var DEFAULT_OPTIONS = {
  indent_size: 2,
  inline: [],
  content_unformatted: ["pre", "textarea", "script"]
};
var logger = _logger.createLogger.call(void 0, { time: "HH:mm:ss" });
var beautifyHtml = _jsbeautify2.default.html;
var formatHTML = (options = {}) => {
  options = Object.assign({}, DEFAULT_OPTIONS, options);
  return _through22.default.obj((file, enc, next) => {
    if (file.isNull())
      return next(null, file);
    const beautify = (buf, _, cb) => {
      try {
        const contents = Buffer.from(beautifyHtml(_nullishCoalesce((buf == null ? void 0 : buf.toString()), () => ( "")), options));
        if (next === cb) {
          file.contents = contents;
          return cb(null, file);
        }
        cb(null, contents);
        next(null, file);
      } catch (err) {
        const opts = Object.assign({}, options, { fileName: file.path });
        const error = new (0, _pluginerror2.default)(PLUGIN_NAME, err, opts);
        if (next !== cb) {
          return next(error);
        }
        cb(error);
      }
    };
    if (file.isStream()) {
      file.contents = file.contents.pipe(_through22.default.call(void 0, beautify));
    } else {
      if (options.verbose) {
        logger.info(`${PLUGIN_NAME} is formatting file: ${file.path}`);
      }
      beautify(file.contents, null, next);
    }
  });
};
var src_default = formatHTML;



module.exports = src_default; exports.formatHTML = formatHTML;
exports.default = module.exports;